/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package progettose;

import static java.awt.Color.black;
import java.awt.Desktop;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.List;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniele
 */
public class InterfacciaGrafica extends javax.swing.JFrame {

    private final DefaultTableModel tb = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            //all cells false
            return false;
        }
    };

    private final DefaultTableModel tb2 = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    String tipo = "";
    String interrompibile = "";
    DefaultListModel listModel = new DefaultListModel();
    DefaultListModel listModelVis = new DefaultListModel();
    DefaultListModel listModelComp = new DefaultListModel();
    DefaultListModel listModelSkills = new DefaultListModel();

    Planner p;
    List<String> materiali = new ArrayList<>();
    int id;

    /**
     * Creates new form InterfacciaGrafica
     */
    public InterfacciaGrafica() {
        try {
            p = new Planner("alessio", "12345");
        } catch (SQLException ex) {
            Logger.getLogger(InterfacciaGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        togliBordi();

        for (String m : p.getAllMaterials()) {
            tendinaMateriali.addItem(m);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GestioneAttività = new javax.swing.JFrame();
        buttonCreaAttività = new javax.swing.JButton();
        buttonMostraAttività = new javax.swing.JButton();
        buttonCancellaAttività = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabellaAttività = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        textAreaWorkspaceNotesVis = new javax.swing.JTextArea();
        labelDE = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        listaMaterialiVis = new javax.swing.JList<>();
        labelML = new javax.swing.JLabel();
        buttonSMP = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaCompetenze = new javax.swing.JList<>();
        labelCO = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaDescrizioneAttivitàVis = new javax.swing.JTextArea();
        labelWO = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buttonModificaAttività = new javax.swing.JButton();
        buttonAssegna = new javax.swing.JButton();
        creazioneAttività = new javax.swing.JFrame();
        tendinaTipoAttività = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        labelID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        fieldID = new javax.swing.JTextField();
        fieldFactorySite = new javax.swing.JTextField();
        fieldArea = new javax.swing.JTextField();
        fieldTime = new javax.swing.JTextField();
        fieldWeek = new javax.swing.JTextField();
        tendinaMateriali = new javax.swing.JComboBox<>();
        buttonAggiungiMateriale = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaWorkspace = new javax.swing.JTextArea();
        buttonCrea = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        textAreaDescrizioneAttività = new javax.swing.JTextArea();
        tendinaTipologia = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaMateriali = new javax.swing.JList<>();
        tendinaInterrompibile = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        buttonRimuoviMateriale = new javax.swing.JButton();
        labelAttivitàOra = new javax.swing.JLabel();
        labelTipologiaOra = new javax.swing.JLabel();
        labelInterrompibileOra = new javax.swing.JLabel();
        assegnaAttività = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textWeekAssegnata = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        textAttivitàDaAssegnare = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tabellaDisponibilità = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        listaSkills = new javax.swing.JList<>();
        buttonGestManut = new javax.swing.JButton();

        GestioneAttività.setTitle("MENU' GESTIONE ATTIVITA'");
        GestioneAttività.setMinimumSize(new java.awt.Dimension(1246, 650));
        GestioneAttività.getContentPane().setLayout(null);

        buttonCreaAttività.setText("Crea attività");
        buttonCreaAttività.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreaAttivitàActionPerformed(evt);
            }
        });
        GestioneAttività.getContentPane().add(buttonCreaAttività);
        buttonCreaAttività.setBounds(50, 40, 240, 40);

        buttonMostraAttività.setText("Mostra elenco attività");
        buttonMostraAttività.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMostraAttivitàActionPerformed(evt);
            }
        });
        GestioneAttività.getContentPane().add(buttonMostraAttività);
        buttonMostraAttività.setBounds(50, 90, 240, 40);

        buttonCancellaAttività.setText("Cancella attività");
        buttonCancellaAttività.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancellaAttivitàActionPerformed(evt);
            }
        });
        GestioneAttività.getContentPane().add(buttonCancellaAttività);
        buttonCancellaAttività.setBounds(50, 140, 240, 40);

        tabellaAttività.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabellaAttività.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabellaAttività.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabellaAttività.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabellaAttività.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabellaAttivitàMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabellaAttivitàMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tabellaAttività);

        GestioneAttività.getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(400, 30, 760, 250);

        textAreaWorkspaceNotesVis.setEditable(false);
        textAreaWorkspaceNotesVis.setColumns(20);
        textAreaWorkspaceNotesVis.setRows(5);
        textAreaWorkspaceNotesVis.setBorder(null);
        jScrollPane7.setViewportView(textAreaWorkspaceNotesVis);

        GestioneAttività.getContentPane().add(jScrollPane7);
        jScrollPane7.setBounds(280, 450, 270, 150);

        labelDE.setFont(new java.awt.Font("Britannic Bold", 0, 12)); // NOI18N
        labelDE.setForeground(new java.awt.Color(102, 204, 255));
        labelDE.setText("DESCRIPTION");
        GestioneAttività.getContentPane().add(labelDE);
        labelDE.setBounds(90, 420, 166, 30);

        jScrollPane8.setViewportView(listaMaterialiVis);

        GestioneAttività.getContentPane().add(jScrollPane8);
        jScrollPane8.setBounds(560, 450, 240, 150);

        labelML.setFont(new java.awt.Font("Britannic Bold", 0, 12)); // NOI18N
        labelML.setForeground(new java.awt.Color(102, 204, 255));
        labelML.setText("LISTA MATERIALI");
        GestioneAttività.getContentPane().add(labelML);
        labelML.setBounds(640, 420, 130, 30);

        buttonSMP.setText("Mostra SMP");
        buttonSMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSMPActionPerformed(evt);
            }
        });
        GestioneAttività.getContentPane().add(buttonSMP);
        buttonSMP.setBounds(70, 390, 120, 30);

        jScrollPane4.setViewportView(listaCompetenze);

        GestioneAttività.getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(810, 450, 240, 150);

        labelCO.setFont(new java.awt.Font("Britannic Bold", 0, 12)); // NOI18N
        labelCO.setForeground(new java.awt.Color(153, 204, 255));
        labelCO.setText("COMPETENZE NECESSARIE");
        GestioneAttività.getContentPane().add(labelCO);
        labelCO.setBounds(860, 420, 170, 30);

        textAreaDescrizioneAttivitàVis.setEditable(false);
        textAreaDescrizioneAttivitàVis.setColumns(20);
        textAreaDescrizioneAttivitàVis.setRows(5);
        textAreaDescrizioneAttivitàVis.setBorder(null);
        textAreaDescrizioneAttivitàVis.setDisabledTextColor(new java.awt.Color(102, 102, 255));
        textAreaDescrizioneAttivitàVis.setSelectionColor(new java.awt.Color(153, 153, 153));
        jScrollPane5.setViewportView(textAreaDescrizioneAttivitàVis);

        GestioneAttività.getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(0, 450, 270, 150);

        labelWO.setFont(new java.awt.Font("Britannic Bold", 0, 12)); // NOI18N
        labelWO.setForeground(new java.awt.Color(102, 204, 255));
        labelWO.setText("WORKSPACE NOTES");
        GestioneAttività.getContentPane().add(labelWO);
        labelWO.setBounds(360, 420, 166, 30);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setMinimumSize(new java.awt.Dimension(1400, 650));
        jPanel1.setLayout(null);

        buttonModificaAttività.setText("Modifica attività");
        buttonModificaAttività.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificaAttivitàActionPerformed(evt);
            }
        });
        jPanel1.add(buttonModificaAttività);
        buttonModificaAttività.setBounds(50, 190, 240, 40);

        buttonAssegna.setText("Assegna attività");
        buttonAssegna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAssegnaActionPerformed(evt);
            }
        });
        jPanel1.add(buttonAssegna);
        buttonAssegna.setBounds(50, 240, 240, 40);

        GestioneAttività.getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1230, 610);

        creazioneAttività.setMinimumSize(new java.awt.Dimension(1100, 600));
        creazioneAttività.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                creazioneAttivitàWindowClosing(evt);
            }
        });
        creazioneAttività.getContentPane().setLayout(null);

        tendinaTipoAttività.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Planned", "EWO", "Extra" }));
        tendinaTipoAttività.setToolTipText("");
        creazioneAttività.getContentPane().add(tendinaTipoAttività);
        tendinaTipoAttività.setBounds(90, 30, 89, 30);

        jLabel1.setText("Tipo di attività");
        creazioneAttività.getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 40, 144, 14);

        labelID.setText("Activity ID");
        creazioneAttività.getContentPane().add(labelID);
        labelID.setBounds(10, 90, 70, 14);

        jLabel3.setText("Factory site");
        creazioneAttività.getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 130, 80, 14);

        jLabel4.setText("Area");
        creazioneAttività.getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 170, 60, 14);

        jLabel5.setText("Typology");
        creazioneAttività.getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 210, 70, 14);

        jLabel6.setText("Activity description");
        creazioneAttività.getContentPane().add(jLabel6);
        jLabel6.setBounds(500, 40, 140, 14);

        jLabel7.setText("Time");
        creazioneAttività.getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 260, 50, 14);

        jLabel8.setText("Interruptible");
        creazioneAttività.getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 340, 80, 20);

        jLabel9.setText("Materials");
        creazioneAttività.getContentPane().add(jLabel9);
        jLabel9.setBounds(10, 390, 70, 20);

        jLabel10.setText("Week");
        creazioneAttività.getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 300, 50, 14);

        jLabel11.setText("Workspace notes");
        creazioneAttività.getContentPane().add(jLabel11);
        jLabel11.setBounds(820, 40, 140, 14);

        fieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldIDActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(fieldID);
        fieldID.setBounds(90, 80, 90, 30);

        fieldFactorySite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldFactorySiteActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(fieldFactorySite);
        fieldFactorySite.setBounds(90, 120, 90, 30);
        creazioneAttività.getContentPane().add(fieldArea);
        fieldArea.setBounds(90, 160, 90, 30);

        fieldTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldTimeActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(fieldTime);
        fieldTime.setBounds(90, 250, 90, 30);
        creazioneAttività.getContentPane().add(fieldWeek);
        fieldWeek.setBounds(90, 290, 90, 30);

        creazioneAttività.getContentPane().add(tendinaMateriali);
        tendinaMateriali.setBounds(90, 390, 90, 30);

        buttonAggiungiMateriale.setText("Aggiungi");
        buttonAggiungiMateriale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAggiungiMaterialeActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(buttonAggiungiMateriale);
        buttonAggiungiMateriale.setBounds(200, 390, 82, 30);

        textAreaWorkspace.setColumns(20);
        textAreaWorkspace.setRows(5);
        jScrollPane2.setViewportView(textAreaWorkspace);

        creazioneAttività.getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(740, 70, 250, 140);

        buttonCrea.setText("ATTIVITA'");
        buttonCrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreaActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(buttonCrea);
        buttonCrea.setBounds(750, 320, 250, 81);

        textAreaDescrizioneAttività.setColumns(20);
        textAreaDescrizioneAttività.setRows(5);
        jScrollPane6.setViewportView(textAreaDescrizioneAttività);

        creazioneAttività.getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(425, 69, 250, 140);

        tendinaTipologia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electrical", "Electronic", "Hydraulic", "Mechanical" }));
        creazioneAttività.getContentPane().add(tendinaTipologia);
        tendinaTipologia.setBounds(90, 200, 90, 30);

        jScrollPane1.setViewportView(listaMateriali);

        creazioneAttività.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(430, 300, 240, 130);

        tendinaInterrompibile.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));
        creazioneAttività.getContentPane().add(tendinaInterrompibile);
        tendinaInterrompibile.setBounds(90, 340, 90, 30);

        jLabel12.setText("Material list");
        creazioneAttività.getContentPane().add(jLabel12);
        jLabel12.setBounds(520, 270, 100, 30);

        buttonRimuoviMateriale.setText("Rimuovi");
        buttonRimuoviMateriale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRimuoviMaterialeActionPerformed(evt);
            }
        });
        creazioneAttività.getContentPane().add(buttonRimuoviMateriale);
        buttonRimuoviMateriale.setBounds(500, 440, 90, 30);

        labelAttivitàOra.setText("(Now is");
        creazioneAttività.getContentPane().add(labelAttivitàOra);
        labelAttivitàOra.setBounds(200, 30, 170, 30);

        labelTipologiaOra.setText("(Now is");
        creazioneAttività.getContentPane().add(labelTipologiaOra);
        labelTipologiaOra.setBounds(210, 200, 170, 30);

        labelInterrompibileOra.setText("(Now is");
        creazioneAttività.getContentPane().add(labelInterrompibileOra);
        labelInterrompibileOra.setBounds(210, 340, 170, 30);

        assegnaAttività.setMinimumSize(new java.awt.Dimension(1160, 370));
        assegnaAttività.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                assegnaAttivitàWindowClosing(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 102, 0));
        jPanel2.setMinimumSize(new java.awt.Dimension(1176, 321));

        jLabel2.setText("Week");

        textWeekAssegnata.setEditable(false);
        textWeekAssegnata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textWeekAssegnataActionPerformed(evt);
            }
        });

        jLabel13.setText("Activity to assign");

        textAttivitàDaAssegnare.setEditable(false);
        textAttivitàDaAssegnare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAttivitàDaAssegnareActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        jLabel15.setText("SKILLS NEEDED");

        jLabel16.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        jLabel16.setText("MAINTAINER AVAILABILITY");

        tabellaDisponibilità.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabellaDisponibilità.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabellaDisponibilitàMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabellaDisponibilitàMouseReleased(evt);
            }
        });
        jScrollPane10.setViewportView(tabellaDisponibilità);

        jScrollPane11.setViewportView(listaSkills);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textWeekAssegnata, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel13)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(textAttivitàDaAssegnare, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textWeekAssegnata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textAttivitàDaAssegnare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout assegnaAttivitàLayout = new javax.swing.GroupLayout(assegnaAttività.getContentPane());
        assegnaAttività.getContentPane().setLayout(assegnaAttivitàLayout);
        assegnaAttivitàLayout.setHorizontalGroup(
            assegnaAttivitàLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assegnaAttivitàLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        assegnaAttivitàLayout.setVerticalGroup(
            assegnaAttivitàLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MENU' PRINCIPALE");

        buttonGestManut.setText("Gestione Manutenzione");
        buttonGestManut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGestManutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(buttonGestManut)
                .addContainerGap(132, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(buttonGestManut)
                .addContainerGap(223, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGestManutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGestManutActionPerformed

        GestioneAttività.setVisible(true);
        buttonModificaAttività.setVisible(false);
        buttonAssegna.setVisible(false);
        disattivaVis();
    }//GEN-LAST:event_buttonGestManutActionPerformed

    private void buttonCreaAttivitàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreaAttivitàActionPerformed
        labelTipologiaOra.setVisible(false);
        labelAttivitàOra.setVisible(false);
        labelInterrompibileOra.setVisible(false);
        fieldID.setEnabled(true);
        labelID.setEnabled(true);
        creazioneAttività.setVisible(true);
        buttonModificaAttività.setEnabled(false);
        labelTipologiaOra.setEnabled(false);
        labelAttivitàOra.setEnabled(false);
        labelInterrompibileOra.setEnabled(false);
        buttonCrea.setText("CREA ATTIVITA'");
        //*String[] opzioni ={"Planned","EWO","Extra"};
        //* JOptionPane.showOptionDialog(null, "Scegli il tipo di attività da creare","Selezione tipo di attività", WIDTH, HEIGHT, null, opzioni, EXIT_ON_CLOSE);
        //* creazioneAttività.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCreaAttivitàActionPerformed

    private void fieldTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldTimeActionPerformed

    private void buttonCreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreaActionPerformed

        if (fieldID.getText().equals("") || fieldFactorySite.getText().equals("") || fieldArea.getText().equals("")
                || textAreaDescrizioneAttività.getText().equals("")
                || fieldTime.getText().equals("") || fieldWeek.getText().equals("")) {
            mostraErrore("ERRORE", "ALCUNI CAMPI OBBLIGATORI NON SONO STATI COMPILATI");

        } else {
            Activity a = buildActivity(tendinaTipoAttività.getSelectedItem().toString());
            if (a == null) {
                mostraErrore("ERRORE", "Input non corretti!");
            } else if (buttonCrea.getText().equals("CREA ATTIVITA'")) {
                if (!p.createActivity(a)) {
                    mostraErrore("ERRORE", "ATTIVITA' NON CREATA CORRETTAMENTE");
                } else {
                    svuota();
                    mostraSuccesso("ATTIVITA' CREATA", "Hai creato l'attività correttamente!");

                }

            } else {
                if (!p.modifyActivity(a)) {
                    mostraErrore("ERRORE", "ATTIVITA' NON MODIFICATA");
                } else {
                    svuota();
                    mostraSuccesso("ATTIVITA' MODIFICATA", "Hai modificato l'attività correttamente");
                    creazioneAttività.dispatchEvent(new WindowEvent(creazioneAttività, WindowEvent.WINDOW_CLOSING));
                }
            }
        }
    }//GEN-LAST:event_buttonCreaActionPerformed

    private void buttonAggiungiMaterialeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAggiungiMaterialeActionPerformed

        String materiale = tendinaMateriali.getSelectedItem().toString();
        materiali.add(materiale);
        if (listModel.contains(materiale) == false) {
            listModel.addElement(materiale);
        } else {
            mostraErrore("ERRORE", "Materiale già inserito");
        }

        listaMateriali.setModel(listModel);


    }//GEN-LAST:event_buttonAggiungiMaterialeActionPerformed

    private void fieldFactorySiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldFactorySiteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldFactorySiteActionPerformed

    private void buttonCancellaAttivitàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancellaAttivitàActionPerformed

        String s = JOptionPane.showInputDialog(null, "Inserisci l'ID da cancellare");
        if (s == null) {
        } else if (s.isBlank()) {
            JOptionPane.showMessageDialog(null, "Campo ID vuoto", "ERRORE", ERROR_MESSAGE);
        } else {
            try {
                int id = Integer.parseInt(s);
                if (!p.deleteActivity(id)) {
                    mostraErrore("ERRORE", "Non è stato possibile cancellare l'attività");
                } else {
                    mostraSuccesso("CANCELLAZIONE EFFETTUATA", "Attività cancellata con successo!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Inserisci un ID valido", "ERRORE", ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_buttonCancellaAttivitàActionPerformed


    private void buttonMostraAttivitàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMostraAttivitàActionPerformed

        buttonModificaAttività.setVisible(true);
        buttonAssegna.setVisible(true);
        while (tb.getRowCount() > 0) {
            tb.removeRow(0);
        }
        riempiTabella();
        if (tb.getRowCount() == 0) {
            mostraErrore("ERRORE", "Nessuna attività trovata");
        }
    }//GEN-LAST:event_buttonMostraAttivitàActionPerformed

    private void fieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldIDActionPerformed

    private void buttonRimuoviMaterialeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRimuoviMaterialeActionPerformed
        if (listaMateriali.getSelectedIndex() == -1) {
            mostraErrore("ERROR", "Seleziona un materiale dalla lista dei materiali da rimuovere");
        } else {
            materiali.remove(listaMateriali.getSelectedValue());
            listModel.removeElement(listaMateriali.getSelectedValue());
            listaMateriali.setModel(listModel);
        }
    }//GEN-LAST:event_buttonRimuoviMaterialeActionPerformed

    private void buttonModificaAttivitàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificaAttivitàActionPerformed
        labelAttivitàOra.setText(("(Now is"));
        labelTipologiaOra.setText(("(Now is"));
        labelInterrompibileOra.setText(("(Now is"));
        labelInterrompibileOra.setVisible(true);
        labelAttivitàOra.setVisible(true);
        labelTipologiaOra.setVisible(true);
        int indice = tabellaAttività.getSelectedRow();
        listModel.clear();
        if (indice == -1) {
            mostraErrore("ERRORE", "Seleziona una riga dalla tabella!");
        } else {
            creazioneAttività.setVisible(true);
            buttonModificaAttività.setEnabled(true);
            labelTipologiaOra.setEnabled(true);
            labelAttivitàOra.setEnabled(true);
            labelInterrompibileOra.setEnabled(true);
            fieldID.setEnabled(false);
            labelID.setEnabled(false);
            buttonCrea.setText("MODIFICA ATTIVITA'");
            buttonCreaAttività.setEnabled(false);
            id = Integer.parseInt(tb.getValueAt(tabellaAttività.getSelectedRow(), 0).toString());
            Activity a = p.getActivity(id);
            materiali = a.getMaterials();
            String tipo = "";
            switch (a.getType()) {
                case 0:
                    tipo = "Planned";
                    break;
                case 1:
                    tipo = "EWO";
                    break;
                default:
                    tipo = "Extra";
                    break;
            }
            fieldID.setText(String.valueOf(a.getId()));
            labelAttivitàOra.setText(labelAttivitàOra.getText() + " " + tipo.toLowerCase() + ")");
            fieldFactorySite.setText(a.getFactorySite());
            fieldArea.setText(a.getArea());
            labelTipologiaOra.setText((labelTipologiaOra.getText()) + " " + a.getTypology().toLowerCase() + ")");
            fieldTime.setText(String.valueOf(a.getEstimatedTime()));
            fieldWeek.setText(String.valueOf(a.getWeek()));
            labelInterrompibileOra.setText(labelInterrompibileOra.getText() + " " + a.isInterruptable() + ")");
            textAreaDescrizioneAttività.setText(a.getActivityDescription());
            textAreaWorkspace.setText(a.getWorkSpaceNote());
            for (String m : a.getMaterials()) {
                listModel.addElement(m);
            }
            listaMateriali.setModel(listModel);
        }

    }//GEN-LAST:event_buttonModificaAttivitàActionPerformed

    private void creazioneAttivitàWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_creazioneAttivitàWindowClosing
        buttonModificaAttività.setEnabled(true);
        if (buttonCrea.getText().equals(("MODIFICA ATTIVITA'"))) {
            riempiTabella();
        }
        buttonCrea.setText("ATTIVITA'");
        buttonCreaAttività.setEnabled(true);
        svuota();

    }//GEN-LAST:event_creazioneAttivitàWindowClosing

    private void buttonSMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSMPActionPerformed
        id = Integer.parseInt(tb.getValueAt(tabellaAttività.getSelectedRow(), 0).toString());
        Activity a = p.getActivity(id);
        if (a.getProcedure() == null) {
            mostraErrore("ERRORE", "Nessun SMP associato alla procedura");
        } else {
            try {
                Desktop.getDesktop().open(a.getProcedure().getSmp());
            } catch (IOException ex) {
                mostraErrore("ERRORE", "File non trovato");
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_buttonSMPActionPerformed

    private void tabellaAttivitàMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabellaAttivitàMouseClicked
        listModelVis.clear();
        listModelComp.clear();
        DefaultTableModel tb = (DefaultTableModel) tabellaAttività.getModel();
        listaCompetenze.setModel(listModelComp);
        listaMaterialiVis.setModel(listModel);
        int indice = tabellaAttività.getSelectedRow();
        if (indice == -1) {
            mostraErrore("ERRORE", "Seleziona una riga dalla tabella!");
        } else {
            abilitaVis();
            id = Integer.parseInt(tb.getValueAt(tabellaAttività.getSelectedRow(), 0).toString());
            Activity a = p.getActivity(id);
            textAreaDescrizioneAttivitàVis.setText(a.getActivityDescription());
            textAreaWorkspaceNotesVis.setText(a.getWorkSpaceNote());
            List<String> materiali = a.getMaterials();
            for (String m : materiali) {
                listModelVis.addElement(m);
            }
            listaMaterialiVis.setModel(listModelVis);
            if (a.getProcedure() != null) {
                List<String> competenze = a.getProcedure().getCompetencies();
                for (String c : competenze) {
                    listModelComp.addElement("·" + c);
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_tabellaAttivitàMouseClicked

    private void buttonAssegnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAssegnaActionPerformed
        int indice = tabellaAttività.getSelectedRow();
        if (indice == -1) {
            mostraErrore("ERRORE", "Seleziona un'attività dalla tabella!");
        } else {
            assegnaAttività.setVisible(true);
            while (tb2.getRowCount() > 0) {
                tb2.removeRow(0);
            }

            tabellaDisponibilità.getColumnModel().setSelectionModel(new DefaultListSelectionModel() {
                private boolean isSelectable(int indice) {
                    return !(indice == 1 || indice == 0);
                }

                @Override
                public void setSelectionInterval(int indice1, int indice2) {
                    if (isSelectable(indice1) && isSelectable(indice2)) {
                        super.setSelectionInterval(indice1, indice2);
                    }
                }

                @Override
                public void addSelectionInterval(int indice1, int indice2) {
                    if (isSelectable(indice1) && isSelectable(indice2)) {
                        super.addSelectionInterval(indice1, indice2);
                    }
                }

            });
            
            
                    
                    
            tabellaDisponibilità.setCellSelectionEnabled(true);
            Activity a = p.getActivity(id);
            listModelSkills.clear();
            if (a.getProcedure() != null) {
                List<String> competenze = a.getProcedure().getCompetencies();
                competenze.forEach(c -> {
                    listModelSkills.addElement("·" + c);
                });
            }

            listaSkills.setModel(listModelSkills);
            textWeekAssegnata.setText(String.valueOf(a.getWeek()));
            textAttivitàDaAssegnare.setText(id + " - " + a.getFactorySite() + " - " + a.getArea() + " - " + a.getTypology() + " - " + a.getEstimatedTime() + " mins");

            String[] nomi = {"Maintainer", "Skills", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
            tb2.setColumnIdentifiers(nomi);
            tabellaDisponibilità.setModel(tb2);
            List<Maintainer> maintainers = p.getAllMaintainers();
            for (Maintainer m : maintainers) {
                int matrice[][] = m.getAvailability().get(a.getWeek());
                String competenze;
                if (a.getProcedure() != null) {
                    competenze = contaCompetenze(a.getProcedure().getCompetencies(), m.getCompetencies());
                } else // Se non è associata una procedura all'attività
                {
                    competenze = "0/0";
                }
                String[] percentuali = calcolaPercentuale(matrice);
                String[] inserimento = {m.getName(), competenze, percentuali[0], percentuali[1], percentuali[2], percentuali[3], percentuali[4], percentuali[5], percentuali[6]};
                tb2.addRow(inserimento);
            }

        }
    }//GEN-LAST:event_buttonAssegnaActionPerformed

    private void textWeekAssegnataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textWeekAssegnataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textWeekAssegnataActionPerformed

    private void textAttivitàDaAssegnareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAttivitàDaAssegnareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textAttivitàDaAssegnareActionPerformed

    private void tabellaDisponibilitàMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabellaDisponibilitàMouseClicked
        System.out.println(tb2.getValueAt(tabellaDisponibilità.getSelectedRow(), tabellaDisponibilità.getSelectedColumn()));

        // TODO add your handling code here:
    }//GEN-LAST:event_tabellaDisponibilitàMouseClicked

    private void assegnaAttivitàWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_assegnaAttivitàWindowClosing

    }//GEN-LAST:event_assegnaAttivitàWindowClosing

    private void tabellaAttivitàMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabellaAttivitàMouseReleased

    }//GEN-LAST:event_tabellaAttivitàMouseReleased

    private void tabellaDisponibilitàMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabellaDisponibilitàMouseReleased
//System.out.println(tabellaDisponibilità.getSelectedRow()+tabellaDisponibilità.getSelectedColumn());

/*for(int i:tabellaDisponibilità.getSelectedRows()){
    System.out.println(i);
}
for(int i:tabellaDisponibilità.getSelectedColumns()){
    System.out.println(i);
}*/
// TODO add your handling code here:
    }//GEN-LAST:event_tabellaDisponibilitàMouseReleased

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfacciaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfacciaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfacciaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfacciaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfacciaGrafica().setVisible(true);
            }
        });
    }

    private void svuota() {
        materiali.clear();
        fieldID.setText("");
        fieldFactorySite.setText("");
        fieldTime.setText("");
        fieldWeek.setText("");
        textAreaDescrizioneAttività.setText("");
        textAreaWorkspace.setText("");
        listModel.clear();

        fieldArea.setText("");
    }

    private void disattivaVis() {
        togliBordi();
        buttonSMP.setVisible(false);
        labelWO.setVisible(false);
        labelDE.setVisible(false);
        labelML.setVisible(false);
        labelCO.setVisible(false);
        textAreaDescrizioneAttivitàVis.setVisible(false);
        textAreaWorkspaceNotesVis.setVisible(false);
        listaMaterialiVis.setVisible(false);
        listaCompetenze.setVisible(false);

    }

    private Activity buildActivity(String tipoAttività) {
        Activity a;
        boolean b;
        if (tendinaInterrompibile.getSelectedItem().toString().equals("Si")) {
            b = true;
        } else {
            b = false;
        }
        try {
            switch (tipoAttività) {
                case "Planned":
                    a = new PlannedActivity(Integer.parseInt(fieldID.getText()), fieldFactorySite.getText(), fieldArea.getText(),
                            tendinaTipologia.getSelectedItem().toString(),
                            textAreaDescrizioneAttività.getText(), Integer.parseInt(fieldTime.getText()),
                            Integer.parseInt(fieldWeek.getText()), materiali, b, textAreaWorkspace.getText(), null);
                    break;
                case "EWO":
                    a = new EwoActivity(Integer.parseInt(fieldID.getText()), fieldFactorySite.getText(), fieldArea.getText(),
                            tendinaTipologia.getSelectedItem().toString(),
                            textAreaDescrizioneAttività.getText(), Integer.parseInt(fieldTime.getText()),
                            Integer.parseInt(fieldWeek.getText()), materiali, b, textAreaWorkspace.getText(), null);
                    break;
                default:
                    a = new ExtraActivity(Integer.parseInt(fieldID.getText()), fieldFactorySite.getText(), fieldArea.getText(),
                            tendinaTipologia.getSelectedItem().toString(),
                            textAreaDescrizioneAttività.getText(), Integer.parseInt(fieldTime.getText()),
                            Integer.parseInt(fieldWeek.getText()), materiali, b, textAreaWorkspace.getText(), null);
                    break;
            }
        } catch (NumberFormatException e) {

            return null;
        }
        return a;
    }

    private void abilitaVis() {
        aggiungiBordi();
        buttonSMP.setVisible(true);
        labelWO.setVisible(true);
        labelDE.setVisible(true);
        labelML.setVisible(true);
        labelCO.setVisible(true);
        textAreaDescrizioneAttivitàVis.setVisible(true);
        textAreaWorkspaceNotesVis.setVisible(true);
        listaMaterialiVis.setVisible(true);
        listaCompetenze.setVisible(true);

    }

    private void riempiTabella() {
        while (tb.getRowCount() > 0) {
            tb.removeRow(0);
        }
        String[] nomi = {"ID", "Factory Site", "Area", "Typology", "Estimated Time", "Week", "Tipo", "Interrompibile"};
        tb.setColumnIdentifiers(nomi);
        tabellaAttività.setModel(tb);
        List<Activity> a;
        a = p.getAllActivities();
        for (Activity x : a) {
            switch (x.getType()) {
                case 0:
                    tipo = "Planned";
                    break;
                case 1:
                    tipo = "EWO";
                    break;
                default:
                    tipo = "Extra";
                    break;
            }
            if (x.isInterruptable() == true) {
                interrompibile = "Si";
            } else {
                interrompibile = "No";
            }

            String[] inserimento = {String.valueOf(x.getId()), x.getFactorySite(), x.getArea(), x.getTypology(),
                String.valueOf(x.getEstimatedTime()), String.valueOf(x.getWeek()), tipo, interrompibile};
            tb.addRow(inserimento);
        }
    }

    private String[] calcolaPercentuale(int m[][]) {
        String[] percentuali = new String[7];
        float sum = 0;
        for (int i = 0; i <= 6; i++) {
            for (int j = 0; j <= 6; j++) {
                sum += m[i][j];
            }
            percentuali[i] = String.valueOf((int) (sum / 420 * 100)) + "%";

            sum = 0;
        }

        return percentuali;
    }

    private String contaCompetenze(List<String> competenzeAttività, List<String> competenzeMaintainer) {
        int count = 0;
        for (String c : competenzeAttività) {
            if (competenzeMaintainer.contains(c)) {
                count++;
            }
        }
        return count + "/" + competenzeAttività.size();
    }

    private void aggiungiBordi() {
        jScrollPane8.setBorder(BorderFactory.createLineBorder(black));
        jScrollPane7.setBorder(BorderFactory.createLineBorder(black));
        jScrollPane5.setBorder(BorderFactory.createLineBorder(black));
        jScrollPane4.setBorder(BorderFactory.createLineBorder(black));
        jScrollPane3.setBorder(BorderFactory.createLineBorder(black));
    }

    private void togliBordi() {
        jScrollPane8.setBorder(null);
        jScrollPane7.setBorder(null);
        jScrollPane5.setBorder(null);
        jScrollPane4.setBorder(null);
        jScrollPane3.setBorder(null);

    }

    private void mostraErrore(String titolo, String messaggio) {
        JOptionPane.showMessageDialog(null, messaggio, titolo, ERROR_MESSAGE);
    }

    private void mostraSuccesso(String titolo, String messaggio) {
        JOptionPane.showMessageDialog(null, messaggio, titolo, INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame GestioneAttività;
    private javax.swing.JFrame assegnaAttività;
    private javax.swing.JButton buttonAggiungiMateriale;
    private javax.swing.JButton buttonAssegna;
    private javax.swing.JButton buttonCancellaAttività;
    private javax.swing.JButton buttonCrea;
    private javax.swing.JButton buttonCreaAttività;
    private javax.swing.JButton buttonGestManut;
    private javax.swing.JButton buttonModificaAttività;
    private javax.swing.JButton buttonMostraAttività;
    private javax.swing.JButton buttonRimuoviMateriale;
    private javax.swing.JButton buttonSMP;
    private javax.swing.JFrame creazioneAttività;
    private javax.swing.JTextField fieldArea;
    private javax.swing.JTextField fieldFactorySite;
    private javax.swing.JTextField fieldID;
    private javax.swing.JTextField fieldTime;
    private javax.swing.JTextField fieldWeek;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelAttivitàOra;
    private javax.swing.JLabel labelCO;
    private javax.swing.JLabel labelDE;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelInterrompibileOra;
    private javax.swing.JLabel labelML;
    private javax.swing.JLabel labelTipologiaOra;
    private javax.swing.JLabel labelWO;
    private javax.swing.JList<String> listaCompetenze;
    private javax.swing.JList<String> listaMateriali;
    private javax.swing.JList<String> listaMaterialiVis;
    private javax.swing.JList<String> listaSkills;
    private javax.swing.JTable tabellaAttività;
    private javax.swing.JTable tabellaDisponibilità;
    private javax.swing.JComboBox<String> tendinaInterrompibile;
    private javax.swing.JComboBox<String> tendinaMateriali;
    private javax.swing.JComboBox<String> tendinaTipoAttività;
    private javax.swing.JComboBox<String> tendinaTipologia;
    private javax.swing.JTextArea textAreaDescrizioneAttività;
    private javax.swing.JTextArea textAreaDescrizioneAttivitàVis;
    private javax.swing.JTextArea textAreaWorkspace;
    private javax.swing.JTextArea textAreaWorkspaceNotesVis;
    private javax.swing.JTextField textAttivitàDaAssegnare;
    private javax.swing.JTextField textWeekAssegnata;
    // End of variables declaration//GEN-END:variables
}
